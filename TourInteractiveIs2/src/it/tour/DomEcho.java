package it.tour;

import java.io.IOException;
import java.net.URL;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import android.content.ContentValues;

import android.util.Log;


public class DomEcho {
		
	//dichiarazione di tre contentitori di valori
	public ContentValues valuesPdi;	
	public ContentValues valuesTour;
	public ContentValues valuesImage;
	
	static void vDebug(String debugString){         //metodi di convenienza
		
		Log.v("DomParsing", debugString+"\n");
	
	}	
		
	static void eDebug(String debugString){
		
		Log.e("DomParsing", debugString+"\n");
	
	}
	
	Document document;

	protected static final String XML_URL_NAME = "http://192.168.1.6:8080/ServerTomcat/tours.xml";
	
	//creazione del documento DOM
	public void parserXML() {
			
		DocumentBuilderFactory factory =
    	DocumentBuilderFactory.newInstance();
    	
		try {
    				
    		DocumentBuilder builder = factory.newDocumentBuilder();
    		//Analizza il contenuto XML dell'InputStream e ritorna un nuovo Documento DOM
    		document = builder.parse(new URL(XML_URL_NAME).openStream());
    		
    	} 
    		
		catch (SAXParseException spe) {
    		
			// Error generated by the parser
    		System.out.println("\n** Parsing error"
    		+ ", line " + spe.getLineNumber()
    		+ ", uri " + spe.getSystemId());
    		System.out.println("   " + spe.getMessage() );

    				
    		Exception  x = spe;
    		
    		if (spe.getException() != null)
    			x = spe.getException();
    		
    		x.printStackTrace();

    	} 
    		
		catch (SAXException sxe) {
    				
			// Error generated during parsing
    		Exception  x = sxe;
    		
    		if (sxe.getException() != null)
    			x = sxe.getException();
    		
    		x.printStackTrace();

    	} 
    		
		catch (ParserConfigurationException pce) {
    		
			// Parser with specified options can't be built
    		pce.printStackTrace();

    	} 
    		
    	catch (IOException ioe) {
    				
    		// I/O errore   		
    		ioe.printStackTrace();
    				
    		vDebug("Problema Connessione Server");
    		System.runFinalizersOnExit(false);
    		System.exit(1);
    	
    	}
    	

                        	
    } // parserXML
    
    //riempimento del contenitore di valori relativo ai tours
	public void creaValuesTour(NodeList tours,int i){
    	
		valuesTour = new ContentValues();
		Node t = tours.item(i);//nodo
        
		//nodi figli di ogni nodo tour	
    	NodeList tourDetails = t.getChildNodes();
    	//numero di nodi figli per ogni tour
    	int tour_lenght = tourDetails.getLength();
       
    	//creazione di due array che conterranno i nomi e i valori dei nodi figli 
        String nodeName[] = new String[tour_lenght];
    	String nodeValue[] = new String[tour_lenght];
    		
    	for(int j=0;j<tour_lenght;j++){
    				
    		Node t1 = tourDetails.item(j);
               
    		if(t1.getNodeType() == Node.ELEMENT_NODE){ //anche in questo caso controlliamo se si tratta di tag
    					
    			Element detail=(Element)t1;
    			nodeName[j]=detail.getNodeName(); //leggo il nome del tag
    			nodeValue[j]=detail.getFirstChild().getNodeValue();//leggo il testo in esso contenuto
    			valuesTour.put(nodeName[j], nodeValue[j] );//inserisce il valore come coppia nome-valore
    		
    		}
                        
        }
        
	}
		
	
	public void creaValuesPdi(NodeList pdis,int y){
    	
    	valuesPdi = new ContentValues();
    	Node p = pdis.item(y);//nodo
        
    	NodeList tourDetails = p.getChildNodes(); //per ogni nota abbiamo i vari dettagli
    	int tour_lenght=tourDetails.getLength();
        
    	String nodeName[] = new String[tour_lenght];
    	String nodeValue[]= new String[tour_lenght];
    		
    	for(int j=0;j<tour_lenght;j++){
    			
    		Node p1 =tourDetails.item(j);
               
    		if(p1.getNodeType() == Node.ELEMENT_NODE){ //anche in questo caso controlliamo se si tratta di tag
    		
    			Element detail=(Element)p1; //cast
                nodeName[j]=detail.getNodeName(); //leggo il nome del tag
                nodeValue[j]=detail.getFirstChild().getNodeValue();//leggo il testo in esso contenuto
                valuesPdi.put(nodeName[j], nodeValue[j] );
    		
    		}
            
    	}
		
	}
		
		
	public void creaValuesImage(NodeList images,int v){
	    	
    	valuesImage = new ContentValues();
    	Node im= images.item(v);//nodo
        
    	NodeList imageDetails=im.getChildNodes(); //per ogni nota abbiamo i vari dettagli
    	int image_lenght=imageDetails.getLength();
        
    	String nodeName[] = new String[image_lenght];
    	String nodeValue[]= new String[image_lenght];
    		
    	for(int j=0;j<image_lenght;j++){
    			
    		Node im1=imageDetails.item(j);
               
    		if(im1.getNodeType()==Node.ELEMENT_NODE){ //anche in questo caso controlliamo se si tratta di tag
    			
    			Element detail=(Element)im1; //cast
                nodeName[j]=detail.getNodeName(); //leggo il nome del tag
                nodeValue[j]=detail.getFirstChild().getNodeValue();//leggo il testo in esso contenuto
                valuesImage.put(nodeName[j], nodeValue[j] );
    		
    		}
                        
        }
      
    }
		
}

